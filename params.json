{"name":"Idb","tagline":"IDB.js - Small wrapper for indexedDB API","body":"# IDB.js - indexedDB Wrapper\r\n\r\nIDB.js is a simple wrapper for indexedDB API available in HTML5. The idea of this script is to help you organise your indexedDB connections and transactions, and to avoid code repetition.\r\n\r\n## Example\r\n\r\nIndexedDB is asynchronous so most of the methods provide callbacks. To create/open your Database you need to call `new IDB` and provide 3 arguments: `setup` object, `successHandler` and `errorHandler` (optional). Here's an example:\r\n\r\n    var db;\r\n    \r\n    new window.IDB({\r\n        db: \"Todo\",\r\n        version: 1,\r\n        stores: [\r\n            {\r\n                name: \"tasks\",\r\n                keyPath: \"postDate\",\r\n                schema: {\r\n                    postDate: { unique: true },\r\n                    title: { unique: false },\r\n                    content: { unique: false },\r\n                    tags: { unique: false },\r\n                    due: { unique: false },\r\n                    users: { unique: false }\r\n                }\r\n            },\r\n            {\r\n                name: \"tags\",\r\n                keyPath: \"id\",\r\n                schema: {\r\n                    id: { unique: true },\r\n                    text: { unique: true },\r\n                    colour: { unique: false },\r\n                    priority: { unique: false }\r\n                }\r\n            }\r\n        ]\r\n    }, function() {\r\n        db = this;\r\n        \r\n        // Do more stuff...\r\n    });\r\n\r\n## API Reference\r\n\r\n - [.getStoreInfo()](#getstoreinfo)\r\n - [.insert()](#insert)\r\n - [.openStore()](#openstore)\r\n - [.query()](#query)\r\n - [.queryMultipleKeys()](#querymultiplekeys)\r\n - [.remove()](#remove)\r\n - [.update()](#update)\r\n\r\n###.getStoreInfo()\r\n[Back to top](#api-reference)\r\n\r\n**Description:** Get information on a specific store.\r\n\r\n    .getStoreInfo(storeName, successHandler, errorHandler)\r\n\r\n**Parameter:** `storeName`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Name of a Store in the Database.\r\n\r\n==\r\n\r\n**Parameter:** `successHandler`\r\n\r\n**Type:** `function(event, data) {}`\r\n\r\n**Description:** A function to call when the request finishes. The function get passed 2 parameters: the `Event` and the\r\n `Data`.\r\n\r\n==\r\n\r\n**Parameter:** `errorHandler`\r\n\r\n**Type:** `function(event) {}`\r\n\r\n**Description:** A function to call when the request fails. The function get passed 1 parameter: the `Event`.\r\n\r\n==\r\n\r\n###.insert()\r\n\r\n[Back to top](#api-reference)\r\n\r\n**Description:** Insert data into a specific store.\r\n\r\n    .insert(value, overwrite, storeName, successHandler, errorHandler)\r\n\r\n**Parameter:** `value`\r\n\r\n**Type:** `Object`\r\n\r\n**Description:** A data object that will get inserted into the database.\r\n\r\n==\r\n\r\n**Parameter:** `overwrite`\r\n\r\n**Type:** `Boolean`\r\n\r\n**Description:** If true, `value` will overwrite existing entry if already exists (only if the Store keyPath is not set\r\nto `autoIncrement` [read more](https://developer.mozilla.org/en/docs/IndexedDB/Using_IndexedDB#Structuring_the_database)).\r\n\r\n==\r\n\r\n**Parameter:** `storeName`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Name of a Store in the Database.\r\n\r\n==\r\n\r\n**Parameter:** `successHandler`\r\n\r\n**Type:** `function(event, data) {}`\r\n\r\n**Description:** A function to call when the request finishes. The function get passed 2 parameters: the `Event` and the\r\n `Data`.\r\n\r\n==\r\n\r\n**Parameter:** `errorHandler`\r\n\r\n**Type:** `function(event) {}`\r\n\r\n**Description:** A function to call when the request fails. The function get passed 1 parameter: the `Event`.\r\n\r\n==\r\n\r\n###.openStore()\r\n\r\n[Back to top](#api-reference)\r\n\r\n**Description:** Open store and return `IDBObjectStore`.\r\n\r\n    .openStore(storeName, mode)\r\n\r\n**Parameter:** `storeName`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Name of a Store in the Database.\r\n\r\n==\r\n\r\n**Parameter:** `mode`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Transaction mode: `readwrite` (default) and `readonly` [read more](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase.transaction#Parameters).\r\n\r\n==\r\n\r\n###.query()\r\n\r\n[Back to top](#api-reference)\r\n\r\n**Description:** Query data from a specific store.\r\n\r\n    .query(keyRange, index, storeName, pageIndex, itemsPerPage, direction, successHandler, errorHandler)\r\n\r\n**Parameter:** `keyRange`\r\n\r\n**Type:** `IDBKeyRange` [Read more](https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange)\r\n\r\n**Description:** A range of keys in a specific store [read more](https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange).\r\n Set to `null` to query all keys.\r\n\r\n==\r\n\r\n**Parameter:** `index`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Query key range based on a specific index.\r\n\r\n==\r\n\r\n**Parameter:** `storeName`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Name of a Store in the Database.\r\n\r\n==\r\n\r\n**Parameter:** `pageIndex`\r\n\r\n**Type:** `Number`\r\n\r\n**Description:** Page index, works with `itemsPerPage` to help you setup a paging system.\r\n\r\n==\r\n\r\n**Parameter:** `itemsPerPage`\r\n\r\n**Type:** `Number`\r\n\r\n**Description:** Limit query to a specific number of items. If `itemsPerPage` is not set, query will return all records.\r\n\r\n==\r\n\r\n**Parameter:** `direction`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Cursor direction: `next` (default), `nextunique`, `prev` and `prevunique`\r\n [read more](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor.direction).\r\n\r\n==\r\n\r\n**Parameter:** `successHandler`\r\n\r\n**Type:** `function(event, data) {}`\r\n\r\n**Description:** A function to call when the request finishes. The function get passed 2 parameters: the `Event` and the\r\n `Data`.\r\n\r\n==\r\n\r\n**Parameter:** `errorHandler`\r\n\r\n**Type:** `function(event) {}`\r\n\r\n**Description:** A function to call when the request fails. The function get passed 1 parameter: the `Event`.\r\n\r\n==\r\n\r\n###.queryMultipleKeys()\r\n\r\n[Back to top](#api-reference)\r\n\r\n**Description:** Query data from a specific store using an array of keys.\r\n\r\n    .queryMultipleKeys(keys, index, storeName, successHandler, errorHandler)\r\n\r\n**Parameter:** `keys`\r\n\r\n**Type:** `Array`\r\n\r\n**Description:** An array of keys to query from a store.\r\n\r\n==\r\n\r\n**Parameter:** `index`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Query key range based on a specific index.\r\n\r\n==\r\n\r\n**Parameter:** `storeName`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Name of a Store in the Database.\r\n\r\n==\r\n\r\n**Parameter:** `successHandler`\r\n\r\n**Type:** `function(event, data) {}`\r\n\r\n**Description:** A function to call when the request finishes. The function get passed 2 parameters: the `Event` and the\r\n `Data`.\r\n\r\n==\r\n\r\n**Parameter:** `errorHandler`\r\n\r\n**Type:** `function(event) {}`\r\n\r\n**Description:** A function to call when the request fails. The function get passed 1 parameter: the `Event`.\r\n\r\n==\r\n\r\n###.remove()\r\n\r\n[Back to top](#api-reference)\r\n\r\n**Description:** Insert data into a specific store.\r\n\r\n    .remove(key, storeName, successHandler, errorHandler)\r\n\r\n**Parameter:** `key`\r\n\r\n**Type:** `String|Number`\r\n\r\n**Description:** Key of an item in the store.\r\n\r\n==\r\n\r\n**Parameter:** `storeName`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Name of a Store in the Database.\r\n\r\n==\r\n\r\n**Parameter:** `successHandler`\r\n\r\n**Type:** `function(event, data) {}`\r\n\r\n**Description:** A function to call when the request finishes. The function get passed 2 parameters: the `Event` and the\r\n `Data`.\r\n\r\n==\r\n\r\n**Parameter:** `errorHandler`\r\n\r\n**Type:** `function(event) {}`\r\n\r\n**Description:** A function to call when the request fails. The function get passed 1 parameter: the `Event`.\r\n\r\n==\r\n\r\n###.update()\r\n\r\n[Back to top](#api-reference)\r\n\r\n**Description:** Insert data into a specific store.\r\n\r\n    .update(value, key, storeName, successHandler, errorHandler)\r\n\r\n**Parameter:** `value`\r\n\r\n**Type:** `Object`\r\n\r\n**Description:** A data object that will get inserted into the database.\r\n\r\n==\r\n\r\n**Parameter:** `key`\r\n\r\n**Type:** `String|Number`\r\n\r\n**Description:** Key of an item in the store.\r\n\r\n==\r\n\r\n**Parameter:** `storeName`\r\n\r\n**Type:** `String`\r\n\r\n**Description:** Name of a Store in the Database.\r\n\r\n==\r\n\r\n**Parameter:** `successHandler`\r\n\r\n**Type:** `function(event, data) {}`\r\n\r\n**Description:** A function to call when the request finishes. The function get passed 2 parameters: the `Event` and the\r\n `Data`.\r\n\r\n==\r\n\r\n**Parameter:** `errorHandler`\r\n\r\n**Type:** `function(event) {}`\r\n\r\n**Description:** A function to call when the request fails. The function get passed 1 parameter: the `Event`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}